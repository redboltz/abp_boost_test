# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  tags:
    include:
      - '*'
  branches:
    include:
      - '*'
pr:
  - '*'

pool:
  vmImage: 'windows-2019'

strategy:
  matrix:
     A:
      VAL1: ON
     B:
      VAL1: OFF
steps:
- powershell: |
    $Url = "https://sourceforge.net/projects/boost/files/boost-binaries/1.72.0/boost_1_72_0-msvc-14.2-64.exe"
    (New-Object System.Net.WebClient).DownloadFile($Url, "$env:TEMP\boost.exe")
    Start-Process -Wait -FilePath "$env:TEMP\boost.exe" "/SILENT","/SP-","/SUPPRESSMSGBOXES","/DIR=C:\hostedtoolcache\windows\Boost\1.72.0\x86_64"
  displayName: 'install boost'
  
- powershell: |
    ls -l test
    git submodule update --init --recursive
    if (!$?) {
      return Write-Error "git submodule update --init --recursive failed"
    }
    mkdir build
    if (!$?) {
      return Write-Error "mkdir build failed"
    }
    cd build
    if (!$?) {
      return Write-Error "cd build failed"
    }
    $env:CL="/D_WIN32_WINNT#0x0601 /DBOOST_THREAD_VERSION#3 /DBOOST_ALLOW_DEPRECATED_HEADERS"
    $env:BOOST_ROOT="C:\hostedtoolcache\windows\Boost\1.72.0\x86_64"
    $env:PATH="$env:BOOST_ROOT\lib;"+$env:PATH
    cmake -A x64 -DVAL1=$(VAL1) ..
    if (!$?) {
      return Write-Error "cmake -A x64 .. failed"
    }
    cmake --build . --config Release
    if (!$?) {
      return Write-Error "cmake --build . --config Release failed"
    }
    pwd
- bash: |
    ls -l test
    cd build
    cd test
    pwd
    ctest -VV -C Release
  displayName: 'cmake test'

